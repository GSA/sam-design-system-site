{"version":3,"file":"array.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/array.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAuD;AACvD,4CAAmF;AAInF,IAAa,cAAc;IAAS,kCAAsB;IAA1D;;IAgCA,CAAC;IA5BG,qCAAY,GAAZ,UAAa,OAAgB,EAAE,IAAsB;QACjD,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC;IACjD,CAAC;IAeD,oCAAW,GAAX,UAAY,OAAgB,EAAE,IAAsB;QAChD,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE/D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,GAAG,IAAI,qBAAa,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IACL,qBAAC;AAAD,CAAC,AAhCD,CAAoC,mCAAsB,GAgCzD;AAhCY,cAAc;IAD1B,sBAAS,CAAC,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC;GACnB,cAAc,CAgC1B;AAhCY,wCAAc","sourcesContent":["import * as ts from 'typescript';\n\nimport {Type, IntrinsicType} from '../../models/index';\nimport {Component, ConverterTypeComponent, TypeNodeConverter} from '../components';\nimport {Context} from '../context';\n\n@Component({name: 'type:array'})\nexport class ArrayConverter extends ConverterTypeComponent implements TypeNodeConverter<ts.Type, ts.ArrayTypeNode> {\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context: Context, node: ts.ArrayTypeNode): boolean {\n        return node.kind === ts.SyntaxKind.ArrayType;\n    }\n\n    /**\n     * Convert the given array type node to its type reflection.\n     *\n     * This is a node based converter with no type equivalent.\n     *\n     * ```\n     * let someValue: number[];\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The array type node that should be converted.\n     * @returns The type reflection representing the given array type node.\n     */\n    convertNode(context: Context, node: ts.ArrayTypeNode): Type {\n        let result = this.owner.convertType(context, node.elementType);\n\n        if (result) {\n            result.isArray = true;\n        } else {\n            result = new IntrinsicType('Array');\n        }\n\n        return result;\n    }\n}\n"]}