{"version":3,"file":"intrinsic.js","sourceRoot":"","sources":["../../../../src/lib/models/types/intrinsic.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uCAAgC;AAShC;IAAmC,iCAAI;IAWnC,uBAAY,IAAY;QAAxB,YACI,iBAAO,SAEV;QADG,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;IACrB,CAAC;IAOD,6BAAK,GAAL;QACI,IAAM,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAQD,8BAAM,GAAN,UAAO,IAAmB;QACtB,MAAM,CAAC,IAAI,YAAY,aAAa;YAChC,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO;YAC7B,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;IAChC,CAAC;IAKD,gCAAQ,GAAR;QACI,IAAM,MAAM,GAAQ,iBAAM,QAAQ,WAAE,CAAC;QACrC,MAAM,CAAC,IAAI,GAAG,WAAW,CAAC;QAC1B,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACxB,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAKD,gCAAQ,GAAR;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;IAClD,CAAC;IACL,oBAAC;AAAD,CAAC,AAvDD,CAAmC,eAAI,GAuDtC;AAvDY,sCAAa","sourcesContent":["import {Type} from './abstract';\n\n/**\n * Represents an intrinsic type like `string` or `boolean`.\n *\n * ~~~\n * let value: number;\n * ~~~\n */\nexport class IntrinsicType extends Type {\n    /**\n     * The name of the intrinsic type like `string` or `boolean`.\n     */\n    name: string;\n\n    /**\n     * Create a new instance of IntrinsicType.\n     *\n     * @param name  The name of the intrinsic type like `string` or `boolean`.\n     */\n    constructor(name: string) {\n        super();\n        this.name = name;\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        const clone = new IntrinsicType(this.name);\n        clone.isArray = this.isArray;\n        return clone;\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: IntrinsicType): boolean {\n        return type instanceof IntrinsicType &&\n            type.isArray === this.isArray &&\n            type.name === this.name;\n    }\n\n    /**\n     * Return a raw object representation of this type.\n     */\n    toObject(): any {\n        const result: any = super.toObject();\n        result.type = 'instrinct';\n        result.name = this.name;\n        return result;\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        return this.name + (this.isArray ? '[]' : '');\n    }\n}\n"]}