{"version":3,"file":"reflection.js","sourceRoot":"","sources":["../../../../src/lib/models/types/reflection.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,uCAAgC;AAShC;IAAoC,kCAAI;IAWpC,wBAAY,WAAkC;QAA9C,YACI,iBAAO,SAEV;QADG,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;;IACnC,CAAC;IAOD,8BAAK,GAAL;QACI,IAAM,KAAK,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACnD,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAQD,+BAAM,GAAN,UAAO,IAAoB;QACvB,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC;IACzB,CAAC;IAKD,iCAAQ,GAAR;QACI,IAAM,MAAM,GAAQ,iBAAM,QAAQ,WAAE,CAAC;QACrC,MAAM,CAAC,IAAI,GAAG,YAAY,CAAC;QAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QACrD,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAKD,iCAAQ,GAAR;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,UAAU,CAAC;QACtB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC;IACL,CAAC;IACL,qBAAC;AAAD,CAAC,AA7DD,CAAoC,eAAI,GA6DvC;AA7DY,wCAAc","sourcesContent":["import {DeclarationReflection} from '../reflections/declaration';\nimport {Type} from './abstract';\n\n/**\n * Represents a type which has it's own reflection like literal types.\n *\n * ~~~\n * let value: {subValueA;subValueB;subValueC;};\n * ~~~\n */\nexport class ReflectionType extends Type {\n    /**\n     * The reflection of the type.\n     */\n    declaration: DeclarationReflection;\n\n    /**\n     * Create a new instance of ReflectionType.\n     *\n     * @param declaration  The reflection of the type.\n     */\n    constructor(declaration: DeclarationReflection) {\n        super();\n        this.declaration = declaration;\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        const clone = new ReflectionType(this.declaration);\n        clone.isArray = this.isArray;\n        return clone;\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: ReflectionType): boolean {\n        return type === this;\n    }\n\n    /**\n     * Return a raw object representation of this type.\n     */\n    toObject(): any {\n        const result: any = super.toObject();\n        result.type = 'reflection';\n\n        if (this.declaration) {\n            result.declaration = this.declaration.toObject();\n        }\n\n        return result;\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        if (!this.declaration.children && this.declaration.signatures) {\n            return 'function';\n        } else {\n            return 'object';\n        }\n    }\n}\n"]}