{"version":3,"file":"type-parameter.js","sourceRoot":"","sources":["../../../../src/lib/models/types/type-parameter.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uCAAgC;AAShC;IAAuC,qCAAI;IAA3C;;IAkEA,CAAC;IArDG,iCAAK,GAAL;QACI,IAAM,KAAK,GAAG,IAAI,iBAAiB,EAAE,CAAC;QACtC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAQD,kCAAM,GAAN,UAAO,IAAuB;QAC1B,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,iBAAiB,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,IAAI,gBAAyB,CAAC;QAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACrC,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAC9C,gBAAgB,GAAG,IAAI,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,MAAM,CAAC,gBAAgB;YACnB,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC;IACtC,CAAC;IAKD,oCAAQ,GAAR;QACI,IAAM,MAAM,GAAQ,iBAAM,QAAQ,WAAE,CAAC;QACrC,MAAM,CAAC,IAAI,GAAG,eAAe,CAAC;QAC9B,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAExB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QACnD,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAKD,oCAAQ,GAAR;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IACL,wBAAC;AAAD,CAAC,AAlED,CAAuC,eAAI,GAkE1C;AAlEY,8CAAiB","sourcesContent":["import {Type} from './abstract';\n\n/**\n * Represents a type parameter type.\n *\n * ~~~\n * let value: T;\n * ~~~\n */\nexport class TypeParameterType extends Type {\n    /**\n     *\n     */\n    name: string;\n\n    constraint: Type;\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        const clone = new TypeParameterType();\n        clone.isArray = this.isArray;\n        clone.name = this.name;\n        clone.constraint = this.constraint;\n        return clone;\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: TypeParameterType): boolean {\n        if (!(type instanceof TypeParameterType)) {\n            return false;\n        }\n\n        let constraintEquals: boolean;\n        if (this.constraint && type.constraint) {\n            constraintEquals = type.constraint.equals(this.constraint);\n        } else if (!this.constraint && !type.constraint) {\n            constraintEquals = true;\n        } else {\n            return false;\n        }\n\n        return constraintEquals &&\n            type.isArray === this.isArray;\n    }\n\n    /**\n     * Return a raw object representation of this type.\n     */\n    toObject(): any {\n        const result: any = super.toObject();\n        result.type = 'typeParameter';\n        result.name = this.name;\n\n        if (this.constraint) {\n            result.constraint = this.constraint.toObject();\n        }\n\n        return result;\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        return this.name;\n    }\n}\n"]}