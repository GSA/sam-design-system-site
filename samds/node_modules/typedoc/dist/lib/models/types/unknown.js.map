{"version":3,"file":"unknown.js","sourceRoot":"","sources":["../../../../src/lib/models/types/unknown.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uCAAgC;AAKhC;IAAiC,+BAAI;IAWjC,qBAAY,IAAY;QAAxB,YACI,iBAAO,SAEV;QADG,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;IACrB,CAAC;IAOD,2BAAK,GAAL;QACI,IAAM,KAAK,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAQD,4BAAM,GAAN,UAAO,IAAiB;QACpB,MAAM,CAAC,IAAI,YAAY,WAAW;YAC9B,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO;YAC7B,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;IAChC,CAAC;IAKD,8BAAQ,GAAR;QACI,IAAM,MAAM,GAAQ,iBAAM,QAAQ,WAAE,CAAC;QACrC,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;QACxB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACxB,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAKD,8BAAQ,GAAR;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IACL,kBAAC;AAAD,CAAC,AAvDD,CAAiC,eAAI,GAuDpC;AAvDY,kCAAW","sourcesContent":["import {Type} from './abstract';\n\n/**\n * Represents all unknown types.\n */\nexport class UnknownType extends Type {\n    /**\n     * A string representation of the type as returned from TypeScript compiler.\n     */\n    name: string;\n\n    /**\n     * Create a new instance of UnknownType.\n     *\n     * @param name  A string representation of the type as returned from TypeScript compiler.\n     */\n    constructor(name: string) {\n        super();\n        this.name = name;\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        const clone = new UnknownType(this.name);\n        clone.isArray = this.isArray;\n        return clone;\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: UnknownType): boolean {\n        return type instanceof UnknownType &&\n            type.isArray === this.isArray &&\n            type.name === this.name;\n    }\n\n    /**\n     * Return a raw object representation of this type.\n     */\n    toObject(): any {\n        const result: any = super.toObject();\n        result.type = 'unknown';\n        result.name = this.name;\n        return result;\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        return this.name;\n    }\n}\n"]}